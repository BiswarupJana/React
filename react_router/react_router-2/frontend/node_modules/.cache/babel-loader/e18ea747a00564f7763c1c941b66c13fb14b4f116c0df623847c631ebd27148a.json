{"ast":null,"code":"var _jsxFileName = \"/media/joy/Volumn_D/github/React/react_router/react_router-2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => {\n        /*#__PURE__*/_jsxDEV(EventsList, {\n          events: loadedEvents\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not Fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}),{\n    //   status: 500,\n    // });\n\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/media/joy/Volumn_D/github/React/react_router/react_router-2/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList'\nimport { Suspense } from 'react';\n\nconst EventsPage = () => {\n  const { events } = useLoaderData();\n  return (\n    <Suspense>\n      <Await resolve={events}>\n        {(loadedEvents) => {\n          <EventsList events={loadedEvents} />\n        }}\n      </Await>\n    </Suspense>\n  );\n\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not Fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}),{\n    //   status: 500,\n    // });\n\n    throw json({ message: 'Could not fetch events.' }, {\n      status: 500,\n    })\n  } else {\n    return response;\n  }\n}\n\nexport function loader() {\n  defer({\n    events: loadEvents()\n  })\n}"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC;EAAO,CAAC,GAAGP,aAAa,EAAE;EAClC,oBACEI,OAAA,CAACF,QAAQ;IAAAM,QAAA,eACPJ,OAAA,CAACP,KAAK;MAACY,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACnBE,YAAY,IAAK;QACjB,aAAAN,OAAA,CAACH,UAAU;UAACM,MAAM,EAAEG;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAG;MACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACK;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACC;AAGf,CAAC;AAAAR,EAAA,CAZKD,UAAU;EAAA,QACKL,aAAa;AAAA;AAAAe,EAAA,GAD5BV,UAAU;AAchB,eAAeA,UAAU;AAEzB,eAAeW,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;;IAEA,MAAMpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA0B,CAAC,EAAE;MACjDC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBxB,KAAK,CAAC;IACJS,MAAM,EAAES,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}