{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nconst EventsPage = () => {\n  _s();\n  const data = useLoaderData();\n  // // if(data.isError){\n  // //   return <p>{data.message}</p>\n  // // }\n  // const events =data.events;\n  // return (\n  //   <>\n  //     <EventsList events={events} />\n  //   </>\n  // );\n  return Await;\n};\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not Fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}),{\n    //   status: 500,\n    // });\n\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["Await","defer","json","useLoaderData","EventsList","EventsPage","_s","data","_c","loadEvents","response","fetch","ok","message","status","loader","events","$RefreshReg$"],"sources":["/media/joy/Volumn_D/github/React/react_router/react_router-2/frontend/src/pages/Events.js"],"sourcesContent":["import { Await, defer, json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList'\n\nconst EventsPage = () => {\n  const data = useLoaderData();\n  // // if(data.isError){\n  // //   return <p>{data.message}</p>\n  // // }\n  // const events =data.events;\n  // return (\n  //   <>\n  //     <EventsList events={events} />\n  //   </>\n  // );\n  return Await\n\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not Fetch events.'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}),{\n    //   status: 500,\n    // });\n\n    throw json({message:'Could not fetch events.'},{\n      status: 500,\n    })\n  } else {\n    return response;\n  }\n}\n\nexport function loader() {\n  defer({\n    events: loadEvents()\n  })\n}"],"mappings":";AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGJ,aAAa,EAAE;EAC5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOH,KAAK;AAEd,CAAC;AAAAM,EAAA,CAbKD,UAAU;EAAA,QACDF,aAAa;AAAA;AAAAK,EAAA,GADtBH,UAAU;AAehB,eAAeA,UAAU;AAEzB,eAAeI,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;;IAEA,MAAMV,IAAI,CAAC;MAACW,OAAO,EAAC;IAAyB,CAAC,EAAC;MAC7CC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBd,KAAK,CAAC;IACJe,MAAM,EAAEP,UAAU;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}